// schema.prisma

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id             Int              @id @default(autoincrement())
  email          String           @unique
  password       String
  name           String
  createdAt      DateTime         @default(now())
  updatedAt      DateTime         @updatedAt
  events         Event[]          @relation("EventOrganizer")
  tips           Tip[]
  announcements  Announcement[]
  tickets        Ticket[]
  Attendee       Attendee[]
  Subscription   Subscription[]
  TicketPurchase TicketPurchase[]
}

model Event {
  id             Int              @id @default(autoincrement())
  title          String
  description    String
  image          String
  visibility     String           @default("public")
  location       String           @default("online")
  link           String?
  credentials    String?
  startTime      DateTime
  endTime        DateTime
  createdAt      DateTime         @default(now())
  updatedAt      DateTime         @updatedAt
  organizerId    Int
  organizer      User             @relation("EventOrganizer", fields: [organizerId], references: [id])
  attendees      Attendee[]
  tips           Tip[]
  announcements  Announcement[]
  marketing      Marketing[]
  tickets        Ticket[]
  Subscription   Subscription[]
  TicketPurchase TicketPurchase[]
}

model Attendee {
  id        Int      @id @default(autoincrement())
  userId    Int
  eventId   Int
  user      User     @relation(fields: [userId], references: [id])
  event     Event    @relation(fields: [eventId], references: [id])
  createdAt DateTime @default(now())
}

model Tip {
  id        Int      @id @default(autoincrement())
  amount    Float
  message   String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  userId    Int
  eventId   Int
  user      User     @relation(fields: [userId], references: [id])
  event     Event    @relation(fields: [eventId], references: [id])
}

model Announcement {
  id        Int      @id @default(autoincrement())
  title     String
  content   String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  eventId   Int
  userId    Int
  event     Event    @relation(fields: [eventId], references: [id])
  user      User     @relation(fields: [userId], references: [id])
}

model Marketing {
  id             Int      @id @default(autoincrement())
  platform       String
  influencer     String
  campaignStatus String
  eventId        Int
  event          Event    @relation(fields: [eventId], references: [id])
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt
}

model Subscription {
  id        Int      @id @default(autoincrement())
  userId    Int
  eventId   Int
  type      String
  price     Float
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  user      User     @relation(fields: [userId], references: [id])
  event     Event    @relation(fields: [eventId], references: [id])
}

model Ticket {
  id            Int              @id @default(autoincrement())
  name          String
  type          String           @default("free")
  price         Float
  totalQuantity Int
  quantityLeft  Int
  startTime     DateTime
  endTime       DateTime
  createdAt     DateTime         @default(now())
  updatedAt     DateTime         @updatedAt
  eventId       Int
  event         Event            @relation(fields: [eventId], references: [id])
  purchases     TicketPurchase[]
  User          User?            @relation(fields: [userId], references: [id])
  userId        Int?
}

model TicketPurchase {
  id        Int      @id @default(autoincrement())
  ticketId  Int
  userId    Int
  eventId   Int
  quantity  Int
  price     Float
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  ticket    Ticket   @relation(fields: [ticketId], references: [id])
  user      User     @relation(fields: [userId], references: [id])
  event     Event    @relation(fields: [eventId], references: [id])
}
